### I want to be in tmux!

#set -x
if [[ ! -n "$TMUX" && ! -f ~/.tmux.disable ]]; then
    source ~/.zshrc_d/tmux.source.zsh
    tmux::new
fi

### SOME GLOBAL VARS ###
#
export UNAME=$(uname)
export UNAME_R=$(uname -r)
export EPOCHSTART=19700101

if [ -f ~/motd ]; then
  echo
  echo "Local message of the day:"
  cat ~/motd
fi

if [ -f /etc/fedora-release ]; then
    export OS=Fedora
elif [ -f /etc/centos-release ]; then
    export OS=CentOS
elif [ -f /etc/redhat-release ]; then
    export OS=RedHat
elif [ -f /etc/debian_version ]; then
    export OS=Debian
elif [ -f /etc/arch-release ]; then
    export OS=Arch
elif [ -d /data/data/com.termux ]; then
    export OS=Termux
else
    export OS=$(uname)
fi

### SET ALL THE PATHS ###

addpath_recursive () {
    readonly bin=$1

    if [ -e $bin ]; then
        find $bin -maxdepth 2 -type d | while read dir; do
        grep -q '\.' <<< "$dir" || export PATH=$PATH:$dir
    done
    fi
}

addpath_if () {
    readonly addif=$1

    if [ -d $addif ]; then
        export PATH=$PATH:$addif
    fi
}

addpath_if_front () {
    readonly addif=$1

    if [ -d $addif ]; then
        export PATH=$addif:$PATH
    fi
}

addpath_if $GOPATH/bin
addpath_if $HOME/.local/bin
addpath_if $HOME/bin
addpath_if $HOME/go/bin
addpath_if $HOME/scripts
addpath_if /usr/games
addpath_if /usr/local/go/bin
addpath_if /usr/local/scripts
addpath_if /home/paul/.cargo/bin

addpath_if /opt/etc/init.d/
addpath_if /opt/local/etc/init.d/
addpath_if /opt/snonux/etc/init.d/
addpath_if /opt/snonux/local/etc/init.d/

addpath_recursive /opt/bin/
addpath_if_front /opt/local/bin/
addpath_recursive /opt/snonux/bin/
addpath_recursive /opt/snonux/local/bin/
addpath_if_front $HOME/pkg/bin

addpath_if .

export PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin
export FACTERLIB=/var/lib/puppet/lib/facter
#export GOPATH=$HOME/go
test "$OS" = Darwin && export MANPATH=/opt/local/share/man:$MANPATH
export CDPATH=$CDPATH:$HOME
for dir in ~/svn ~/svn/modules ~/git ~/git/java ~/src; do
    test -d $dir && export CDPATH=$CDPATH:$dir
done

### GLOBAL VARS WHICH AFFECT ZSH BEHAVIOUR ###

HISTSIZE=999999
SAVEHIST=999999
HISTFILE=~/.zsh_history

### ZSH OPTIONS ###

setopt histignorealldups sharehistory
setopt nobeep # never ever beep
setopt autocd # running /etc actually does a cd /etc
setopt cdablevars # avoid the need for an explicit $ in cd
setopt listtypes # show types in completion
setopt extendedglob # weird & wacky pattern matching - yay zsh!
# setopt completeinword # not just at the end
# setopt alwaystoend # when complete from middle, move cursor
setopt correct # spelling correction
setopt histverify # when using ! cmds, confirm first
# setopt interactivecomments # escape commands so i can use them later
# setopt recexact # recognise exact, ambiguous matches
setopt printexitvalue # alert me if something's failed

#### ZSH BINDKEYS ###

bindkey -v
bindkey "^R" history-incremental-search-backward

### ZSH MODULES ###

autoload -Uz compinit
compinit

autoload edit-command-line; zle -N edit-command-line
bindkey -M vicmd v edit-command-line

### ZSH STYLE ###

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:processes' command 'ps x -o pid,pcpu,tt,args'

#### ALIASES ###

alias ll='ls -trl'
alias la='ls -fA'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias foo='screen -d -RR -m -S foo'
alias bar='screen -d -RR -m -S bar'
alias loadzsh='source ~/.zshrc'
alias loadrvm='source /usr/local/rvm/scripts/rvm'
alias autopower='sudo powertop --auto-tune'
alias s=sudo
alias sn='sudo ionice -c3 nice -n15'
alias v='view -'
test -f /var/log/kern && alias kernm='sudo grep -v "rsyslogd: -- MARK --" /var/log/kern | less'
test -f /var/log/kern && alias kern='sudo less /var/log/kern'
test -f /var/log/messages && alias messages='sudo less /var/log/messages'
alias tomorrow='date +%Y%m%d --date tomorrow'
alias ttomorrow='date +%Y%m%d --date "2 days"'
alias tttomorrow='date +%Y%m%d --date "3 days"'
alias today='date +%Y%m%d'
alias today2='date +%Y-%m-%d'
alias yesterday='date +%Y%m%d --date yesterday'
alias yyesterday='date +%Y%m%d --date "2 days ago"'
alias yyyesterday='date +%Y%m%d --date "3 days ago"'
alias rsync_nostrict='rsync -e "ssh -o StrictHostKeyChecking=no"'
alias svntop='svn log --quiet | awk "/^r/ { print \$3 }" | sort | uniq -c | sort -n'
alias g='grep -E -i'
alias not='grep -E -i -v'
alias ro='fgrep " ro," /proc/mounts'
alias pl='pgrep -lf'
alias pf='pgrep -f'
alias first='awk "{ print \$1 }"'
alias second='awk "{ print \$2 }"'
alias third='awk "{ print \$3 }"'
alias lst='awk "{ print \$(NF) }"'
alias prelst='awk "{ print \$(NF-1) }"'
alias se='cut -d"|" -f2'

alias -s txt=$EDITOR
alias -s pp=$EDITOR
alias -s json=$EDITOR
alias -s xml=$EDITOR
alias -s erb=$EDITOR
alias -s c=$EDITOR
alias -s rb=$EDITOR
alias -s git='git clone'

### LOAD MORE RC FILES ###

# Load rc files
for rcdir in $HOME/.zshrc_d/ \
    $HOME/.zshrc_{local,private,private_local,work,work_local}_d/; do
    if [ -e $rcdir ]; then
        find $rcdir -name \*.source -delete
        find $rcdir -name \*.source.zsh -type f | sort |
        while read -r rcfile; do
            source $rcfile
        done
    fi
done

# Load additional local rc file
[ -f ~/.zshrc_local ] && source ~/.zshrc_local

### DISPLAY SOME INFOS ON NEW SHELL ###

test "$OS" = FreeBSD && zpool list

# Learn a new command
learn () {
    man $(ls /bin /sbin /usr/bin /usr/sbin 2>/dev/null | shuf -n 1)| sed -n "/^NAME/ { n;p;q }"
}

# FZF fuzzy finder
if [ -f ~/.fzf.zsh ]; then
    # brew/macOS
    source ~/.fzf.zsh
elif [ -f /usr/share/fzf/shell/key-bindings.zsh ]; then
    # Fedora Linux
    source /usr/share/fzf/shell/key-bindings.zsh
fi

# Worktime
if [ -f ~/git/worktime/worktime.source.zsh ]; then
    source ~/git/worktime/worktime.source.zsh
fi

if [ -f ~/.zshrc_local ]; then
    source ~/.zshrc_local
fi
