use Rex -feature => ['1.4'];
use File::Slurp;

group frontends => 'blowfish.buetow.org', 'twofish.buetow.org';
group dnsmaster => 'blowfish.buetow.org';
group dnsslaves => 'twofish.buetow.org';

user 'rex';
sudo TRUE;

parallelism 5;

task 'id', group => 'frontends', sub { say run 'id' };
task 'dump_info', group => 'frontends', sub { dump_system_information };

our $ipv6address = sub {
  my $hostname = shift;
  return '2a01:4f8:c17:20f1::42' if $hostname eq 'blowfish';
  return '2401:c080:1000:45af:5400:3ff:fec6:ca1d' if $hostname eq 'twofish';
  return '::1';
};

our @dns_zones = qw/buetow.org dtail.dev foo.surf foo.zone irregular.ninja sidewalk.ninja snonux.de snonux.me/;

sub secret {
  my $secret = shift;
  read_file($ENV{HOME} . '/.rexsecrets/' . $secret);
}

desc 'Install various packages';
task 'packages', group => 'frontends',
  sub {
    pkg 'rsync', ensure => present;
    pkg 'sudo', ensure => present;
    pkg 'tig', ensure => present;
    pkg 'vger', ensure => present;
    pkg 'zsh', ensure => present;
  };

desc 'Setup httpd';
task 'httpd', group => 'frontends',
  sub {
    file '/etc/httpd.conf',
      source => './etc/httpd.conf',
      owner => 'www',
      group => 'wheel',
      mode => '644',
      on_change => sub {
        service 'httpd' => 'restart';
      };
    service 'httpd', ensure => 'started';
  };

desc 'Setup inetd';
task 'inetd', group => 'frontends',
  sub {
    file '/etc/inetd.conf',
      source => './etc/inetd.conf',
      owner => 'www',
      group => 'wheel',
      mode => '644',
      on_change => sub {
        service 'inetd' => 'restart';
      };
    service 'inetd', ensure => 'started';
  };

desc 'Setup relayd';
task 'relayd', group => 'frontends',
  sub {
    file '/etc/relayd.conf',
      content => template('./etc/relayd.conf.tpl', ipv6address => $ipv6address),
      owner => 'root',
      group => 'wheel',
      mode => '600',
      on_change => sub {
        service 'relayd' => 'restart';
      };
    service 'relayd', ensure => 'started';
  };

desc 'Setup OpenSMTPD';
task 'smtpd', group => 'frontends',
  sub {
    file '/etc/mail/aliases',
      source => './etc/mail/aliases',
      owner => 'root',
      group => 'wheel',
      mode => '644',
      on_change => sub {
        say run 'newaliases';
      };

    file '/etc/mail/virtualdomains',
      source => './etc/mail/virtualdomains',
      owner => 'root',
      group => 'wheel',
      mode => '644',
      on_change => sub {
        service 'smtpd' => 'restart';
      };

    file '/etc/mail/virtualusers',
      source => './etc/mail/virtualusers',
      owner => 'root',
      group => 'wheel',
      mode => '644',
      on_change => sub {
        service 'smtpd' => 'restart';
      };

    file '/etc/mail/smtpd.conf',
      content => template('./etc/mail/smtpd.conf.tpl', mail_hostname => sub {
          my $hostname = shift;
          return 'buetow.org' if $hostname eq 'blowfish';
          return 'www.buetow.org' if $hostname eq 'twofish';
          return 'buetow.org';
        }),
      owner => 'root',
      group => 'wheel',
      mode => '644',
      on_change => sub {
        service 'smtpd' => 'restart';
      };

    service 'smtpd', ensure => 'started';
  };

desc 'Setup DNS master';
task 'dnsmaster', group => 'dnsmaster',
  sub {
    my $restart = FALSE;

    file '/var/nsd/etc/key.conf',
      content => template('./var/nsd/etc/key.conf.tpl',
          nsd_secret => secret('nsd_secret')),
      owner => 'root',
      group => '_nsd',
      mode => '640',
      on_change => sub {
        $restart = TRUE;
      };

    file '/var/nsd/etc/nsd.conf',
      content => template('./var/nsd/etc/nsd.conf.master.tpl',
          dns_zones => \@dns_zones),
      owner => 'root',
      group => '_nsd',
      mode => '640',
      on_change => sub {
        $restart = TRUE;
      };

    for my $zone (@dns_zones) {
      file "/var/nsd/zones/master/$zone.zone",
        content => template("./var/nsd/zones/master/$zone.zone.tpl"),
        owner => 'root',
        group => 'wheel',
        mode => '644',
        on_change => sub {
          $restart = TRUE;
        };
     }

    service 'nsd' => 'restart' if $restart;
    service 'nsd', ensure => 'started';
  };

desc 'Setup DNS slaves';
task 'dnsslaves', group => 'dnsslaves',
  sub {
    my $restart = FALSE;

    file '/var/nsd/etc/key.conf',
      content => template('./var/nsd/etc/key.conf.tpl',
          nsd_secret => secret('nsd_secret')),
      owner => 'root',
      group => '_nsd',
      mode => '640',
      on_change => sub {
        $restart = TRUE;
      };

    file '/var/nsd/etc/nsd.conf',
      content => template('./var/nsd/etc/nsd.conf.slave.tpl',
          dns_zones => \@dns_zones),
      owner => 'root',
      group => '_nsd',
      mode => '640',
      on_change => sub {
        $restart = TRUE;
      };

    service 'nsd' => 'restart' if $restart;
    service 'nsd', ensure => 'started';
  };

desc 'Setup HA';
task 'ha', group => 'frontends',
  sub {
    file '/usr/local/bin/ha.pl',
      source => './usr/local/bin/ha.pl',
      owner => 'root',
      group => 'wheel',
      mode => '755';

    file '/var/run/ha.status',
      content => '# Initial HA status file',
      owner => 'www',
      group => 'wheel',
      mode => '644',
      no_overwrite => TRUE;
  };

desc 'frontend';
task 'frontend', group => 'frontends',
  sub {
    packages();
    httpd();
    inetd();
    relayd();
    smtpd();
    ha();
  };

1;

# vim: syntax=perl
